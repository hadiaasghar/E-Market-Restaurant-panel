import React, { useState, forwardRef, useImperativeHandle } from "react";

const Form1 = forwardRef((props, ref) => {
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    profilePic: null,
  });

  const [errors, setErrors] = useState({});

  useImperativeHandle(ref, () => ({
    validate() {
      let tempErrors = {};
      if (!formData.firstName) tempErrors.firstName = "First Name is required";
      if (!formData.lastName) tempErrors.lastName = "Last Name is required";
      if (!formData.email || !/\S+@\S+\.\S+/.test(formData.email))
        tempErrors.email = "Valid Email is required";
      if (!formData.phone || formData.phone.length < 10)
        tempErrors.phone = "Phone number must be at least 10 digits";
      if (!formData.profilePic)
        tempErrors.profilePic = "Profile Picture is required";
      setErrors(tempErrors);
      return Object.keys(tempErrors).length === 0;
    },
    getFormData() {
      return formData;
    },
  }));

  const handleChange = (e) => {
    const { name, value, files } = e.target;
    setFormData({
      ...formData,
      [name]: files ? files[0] : value,
    });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (ref.current.validate()) {
      // Handle form submission
      alert("Form submitted successfully!");
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div className="p-4 bg-white rounded shadow-md hover:shadow-lg flex flex-col items-center">
        <fieldset className="border rounded-md w-full md:w-11/12 lg:w-3/4 border-gray-300 p-6">
          <legend className="text-md font-semibold uppercase bg-red1 text-white px-2 py-1 rounded">
            Basic Details
          </legend>
          <div className="grid grid-cols-1 gap-4">
            {/* Input fields */}
            <div className="col-span-1">
              <label className="block text-sm font-semibold mb-2">
                First Name
              </label>
              <input
                type="text"
                name="firstName"
                value={formData.firstName}
                onChange={handleChange}
                className="block w-full p-2 bg-[#F5F5F5] border border-gray-300 rounded"
              />
              {errors.firstName && (
                <p className="text-red-500 text-sm">{errors.firstName}</p>
              )}
            </div>
            <div className="col-span-1">
              <label className="block text-sm font-semibold mb-2">
                Last Name
              </label>
              <input
                type="text"
                name="lastName"
                value={formData.lastName}
                onChange={handleChange}
                className="block w-full p-2 bg-[#F5F5F5] border border-gray-300 rounded"
              />
              {errors.lastName && (
                <p className="text-red-500 text-sm">{errors.lastName}</p>
              )}
            </div>
            <div className="col-span-1">
              <label className="block text-sm font-semibold mb-2">Email</label>
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                className="block w-full p-2 bg-[#F5F5F5] border border-gray-300 rounded"
              />
              {errors.email && (
                <p className="text-red-500 text-sm">{errors.email}</p>
              )}
            </div>
            <div className="col-span-1">
              <label className="block text-sm font-semibold mb-2">Phone</label>
              <input
                type="number"
                name="phone"
                value={formData.phone}
                onChange={handleChange}
                className="block w-full p-2 bg-[#F5F5F5] border border-gray-300 rounded"
              />
              {errors.phone && (
                <p className="text-red-500 text-sm">{errors.phone}</p>
              )}
            </div>
            <div className="col-span-1 mt-4">
              <label className="block text-sm font-semibold mb-2">
                Profile Picture
              </label>
              <input
                type="file"
                name="profilePic"
                onChange={handleChange}
                className="block w-full bg-[#F5F5F5] p-2 border border-gray-300 rounded"
              />
              {errors.profilePic && (
                <p className="text-red-500 text-sm">{errors.profilePic}</p>
              )}
            </div>
          </div>
          <button
            type="submit"
            className="bg-red1 p-2 rounded-md text-white mt-4"
          >
            Submit
          </button>
        </fieldset>
      </div>
    </form>
  );
});

export default Form1;
import React, { useState } from "react";

const Form2 = () => {
  const [formData, setFormData] = useState({
    name: "",
    cuisines: "",
    phone: "",
    address: "",
    zone: "",
    latitude: "",
    longitude: "",
    description: "",
    image: null,
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value, files } = e.target;
    setFormData({
      ...formData,
      [name]: files ? files[0] : value,
    });
  };

  const validate = () => {
    let tempErrors = {};
    if (!formData.name) tempErrors.name = "Name is required";
    if (!formData.cuisines) tempErrors.cuisines = "Cuisines are required";
    if (!formData.phone || formData.phone.length < 10)
      tempErrors.phone = "Phone number must be at least 10 digits";
    if (!formData.address) tempErrors.address = "Address is required";
    if (!formData.zone) tempErrors.zone = "Zone is required";
    if (!formData.latitude) tempErrors.latitude = "Latitude is required";
    if (!formData.longitude) tempErrors.longitude = "Longitude is required";
    if (!formData.description)
      tempErrors.description = "Description is required";
    if (!formData.image) tempErrors.image = "Image is required";
    setErrors(tempErrors);
    return Object.keys(tempErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (validate()) {
      alert("Restaurant details saved successfully!");
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div className="p-4 bg-white rounded shadow-md hover:shadow-lg flex flex-col items-center">
        <fieldset className="border rounded-md w-full md:w-11/12 lg:w-3/4 border-gray-300 p-6">
          <legend className="text-md font-semibold uppercase bg-red1 text-white px-2 py-1 rounded">
            Restaurant Details
          </legend>
          <div className="grid grid-cols-1 gap-4">
            <div className="col-span-1">
              <label className="block text-sm font-semibold mb-2">Name</label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleChange}
                className="block w-full p-2 bg-[#F5F5F5] border border-gray-300 rounded"
              />
              {errors.name && (
                <p className="text-red-500 text-sm">{errors.name}</p>
              )}
            </div>
            <div className="col-span-1">
              <label className="block text-sm font-semibold mb-2">
                Cuisines
              </label>
              <input
                type="text"
                name="cuisines"
                value={formData.cuisines}
                onChange={handleChange}
                className="block w-full p-2 bg-[#F5F5F5] border border-gray-300 rounded"
              />
              {errors.cuisines && (
                <p className="text-red-500 text-sm">{errors.cuisines}</p>
              )}
            </div>
            <div className="col-span-1">
              <label className="block text-sm font-semibold mb-2">Phone</label>
              <input
                type="text"
                name="phone"
                value={formData.phone}
                onChange={handleChange}
                className="block w-full p-2 bg-[#F5F5F5] border border-gray-300 rounded"
              />
              {errors.phone && (
                <p className="text-red-500 text-sm">{errors.phone}</p>
              )}
            </div>
            <div className="col-span-1">
              <label className="block text-sm font-semibold mb-2">
                Address
              </label>
              <input
                type="text"
                name="address"
                value={formData.address}
                onChange={handleChange}
                className="block w-full p-2 bg-[#F5F5F5] border border-gray-300 rounded"
              />
              {errors.address && (
                <p className="text-red-500 text-sm">{errors.address}</p>
              )}
            </div>
            <div className="col-span-1">
              <label className="block text-sm font-semibold mb-2">Zone</label>
              <input
                type="text"
                name="zone"
                value={formData.zone}
                onChange={handleChange}
                className="block w-full p-2 bg-[#F5F5F5] border border-gray-300 rounded"
              />
              {errors.zone && (
                <p className="text-red-500 text-sm">{errors.zone}</p>
              )}
            </div>
            <div className="col-span-1">
              <label className="block text-sm font-semibold mb-2">
                Latitude
              </label>
              <input
                type="text"
                name="latitude"
                value={formData.latitude}
                onChange={handleChange}
                className="block w-full p-2 bg-[#F5F5F5] border border-gray-300 rounded"
              />
              {errors.latitude && (
                <p className="text-red-500 text-sm">{errors.latitude}</p>
              )}
            </div>
            <div className="col-span-1">
              <label className="block text-sm font-semibold mb-2">
                Longitude
              </label>
              <input
                type="text"
                name="longitude"
                value={formData.longitude}
                onChange={handleChange}
                className="block w-full p-2 bg-[#F5F5F5] border border-gray-300 rounded"
              />
              {errors.longitude && (
                <p className="text-red-500 text-sm">{errors.longitude}</p>
              )}
            </div>
            <div className="col-span-1">
              <label className="block text-sm font-semibold mb-2">
                Description
              </label>
              <textarea
                name="description"
                value={formData.description}
                onChange={handleChange}
                className="block w-full p-2 bg-[#F5F5F5] border border-gray-300 rounded"
              />
              {errors.description && (
                <p className="text-red-500 text-sm">{errors.description}</p>
              )}
            </div>
            <div className="col-span-1">
              <label className="block text-sm font-semibold mb-2">Image</label>
              <input
                type="file"
                name="image"
                onChange={handleChange}
                className="block w-full p-2 bg-[#F5F5F5] border border-gray-300 rounded"
              />
              {errors.image && (
                <p className="text-red-500 text-sm">{errors.image}</p>
              )}
            </div>
          </div>
          <button
            type="submit"
            className="bg-red1 p-2 rounded-md text-white mt-4"
          >
            Save Details
          </button>
        </fieldset>
      </div>
    </form>
  );
};

export default Form2;
import React, { useState } from "react";

const Form3 = () => {
  const [formData, setFormData] = useState({ file: null });
  const [errors, setErrors] = useState({});

  const handleFileChange = (e) => {
    setFormData({ ...formData, file: e.target.files[0] });
  };

  const validateForm3 = () => {
    let tempErrors = {};
    if (!formData.file) tempErrors.file = "File is required";
    setErrors(tempErrors);
    return Object.keys(tempErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (validateForm3()) {
      // Handle form submission
      console.log("Form3 data submitted", formData);
    }
  };

  return (
    <form
      onSubmit={handleSubmit}
      className="p-4 bg-white rounded shadow-md hover:shadow-lg flex flex-col items-center"
    >
      <fieldset className="border rounded-md w-full md:w-11/12 lg:w-3/4 border-gray-300 p-6">
        <legend className="text-md font-semibold uppercase bg-red1 text-white px-2 py-1 rounded">
          Gallery
        </legend>
        <div className="py-2">
          <input type="file" onChange={handleFileChange} className="w-full" />
          {errors.file && <p className="text-red-500 text-sm">{errors.file}</p>}
        </div>
        <button type="submit" className="bg-red1 text-white px-4 py-2 rounded">
          Submit
        </button>
      </fieldset>
    </form>
  );
};

export default Form3;
import React from "react";
import { FaFileInvoice } from "react-icons/fa";
import { FaArrowRotateLeft } from "react-icons/fa6";
import { useNavigate } from "react-router-dom";

const BottomButton = ({ validateAndSave }) => {
  const navigate = useNavigate();

  const handleSave = () => {
    validateAndSave();
  };

  const handleBack = () => {
    navigate(-1); // Navigates to the previous page
  };

  return (
    <div className="flex flex-col sm:flex-row items-center justify-center gap-4 py-4">
      <button
        onClick={handleSave}
        className="flex items-center gap-2 bg-red1 rounded text-white px-4 py-2 text-sm md:text-base"
      >
        <FaFileInvoice /> Save
      </button>
      <button
        onClick={handleBack}
        className="flex items-center gap-2 rounded bg-gray-400 text-white px-4 py-2 text-sm md:text-base"
      >
        <FaArrowRotateLeft /> Back
      </button>
    </div>
  );
};

export default BottomButton;
when click on the BottomButton save button then save the all data wheich file on the above that show on console
